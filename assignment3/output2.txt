---------------------------------------------------------------------
Token: separator       Lexeme: $               Line: 2
<Rat24S> -> $ <Opt Function Definitions> $ <Opt Declaration List> $ <Statement List> $
---------------------------------------------------------------------
Token: keyword         Lexeme: function        Line: 3
<Opt Function Definitions> -> <Function Definitions>
<Function Definitions -> <Function>
<Function> -> function <Identifier> (<Opt Parameter List>) <Opt Declaration List> <Body>
---------------------------------------------------------------------
Token: identifier      Lexeme: convertx        Line: 3
<Identifier> -> convertx
---------------------------------------------------------------------
Token: separator       Lexeme: (               Line: 3
---------------------------------------------------------------------
Token: identifier      Lexeme: fahr            Line: 3
<Opt Parameter List> -> <Parameter List>
<Parameter List> -> <Parameter>
<Parameter> -> <IDs> <Qualifier>
<IDs> -> <Identifier>
<Identifier> -> fahr
---------------------------------------------------------------------
Token: keyword         Lexeme: integer         Line: 3
<Qualifier> -> integer
---------------------------------------------------------------------
Token: separator       Lexeme: )               Line: 3
---------------------------------------------------------------------
Token: separator       Lexeme: {               Line: 3
<Body> -> { <Statement List> }
---------------------------------------------------------------------
Token: keyword         Lexeme: return          Line: 4
<Statement List> -> <Statement>
<Statement> -> <Return>
<Return> -> ret <Expression>;
---------------------------------------------------------------------
Token: integer         Lexeme: 5               Line: 4
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Integer>
<Integer> -> 5
---------------------------------------------------------------------
Token: operator        Lexeme: *               Line: 4
<Term Prime> -> * <Factor> <Term Prime>
---------------------------------------------------------------------
Token: separator       Lexeme: (               Line: 4
<Factor> -> <Primary>
<Primary> -> ( <Expression> )
---------------------------------------------------------------------
Token: identifier      Lexeme: fahr            Line: 4
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
<Identifier> -> fahr
---------------------------------------------------------------------
Token: operator        Lexeme: -               Line: 4
<Term Prime> -> ε
<Expression Prime> -> - <Term> <Expression Prime>
---------------------------------------------------------------------
Token: integer         Lexeme: 32              Line: 4
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Integer>
<Integer> -> 32
---------------------------------------------------------------------
Token: separator       Lexeme: )               Line: 4
<Term Prime> -> ε
<Expression Prime> -> ε
---------------------------------------------------------------------
Token: operator        Lexeme: /               Line: 4
<Term Prime> -> / <Factor> <Term Prime>
---------------------------------------------------------------------
Token: integer         Lexeme: 9               Line: 4
<Factor> -> <Primary>
<Primary> -> <Integer>
<Integer> -> 9
---------------------------------------------------------------------
Token: separator       Lexeme: ;               Line: 4
<Term Prime> -> ε
<Expression Prime> -> ε
---------------------------------------------------------------------
Token: separator       Lexeme: }               Line: 5
---------------------------------------------------------------------
Token: separator       Lexeme: $               Line: 6
---------------------------------------------------------------------
Token: keyword         Lexeme: integer         Line: 7
<Opt Declaration List> -> <Declaration List>
<Declaration List> -> <Declaration>;
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer
---------------------------------------------------------------------
Token: identifier      Lexeme: low             Line: 7
<IDs> -> <Identifier>, <IDs>
<Identifier> -> low
---------------------------------------------------------------------
Token: separator       Lexeme: ,               Line: 7
---------------------------------------------------------------------
Token: identifier      Lexeme: high            Line: 7
<IDs> -> <Identifier>, <IDs>
<Identifier> -> high
---------------------------------------------------------------------
Token: separator       Lexeme: ,               Line: 7
---------------------------------------------------------------------
Token: identifier      Lexeme: step            Line: 7
<IDs> -> <Identifier>
<Identifier> -> step
---------------------------------------------------------------------
Token: separator       Lexeme: ;               Line: 7
---------------------------------------------------------------------
Token: separator       Lexeme: $               Line: 8
---------------------------------------------------------------------
Token: keyword         Lexeme: scan            Line: 9
<Statement List> -> <Statement> <Statement List>
<Statement> -> <Scan>
<Scan> -> scan ( <IDs> );
---------------------------------------------------------------------
Token: separator       Lexeme: (               Line: 9
---------------------------------------------------------------------
Token: identifier      Lexeme: low             Line: 9
<IDs> -> <Identifier>, <IDs>
<Identifier> -> low
---------------------------------------------------------------------
Token: separator       Lexeme: ,               Line: 9
---------------------------------------------------------------------
Token: identifier      Lexeme: high            Line: 9
<IDs> -> <Identifier>, <IDs>
<Identifier> -> high
---------------------------------------------------------------------
Token: separator       Lexeme: ,               Line: 9
---------------------------------------------------------------------
Token: identifier      Lexeme: step            Line: 9
<IDs> -> <Identifier>
<Identifier> -> step
---------------------------------------------------------------------
Token: separator       Lexeme: )               Line: 9
---------------------------------------------------------------------
Token: separator       Lexeme: ;               Line: 9
---------------------------------------------------------------------
Token: keyword         Lexeme: if              Line: 10
<Statement List> -> <Statement> <Statement List>
<Statement> -> <If>
<If> -> if ( <Condition> ) <Statement> endif
---------------------------------------------------------------------
Token: separator       Lexeme: (               Line: 10
---------------------------------------------------------------------
Token: identifier      Lexeme: ans             Line: 10
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
<Identifier> -> ans
---------------------------------------------------------------------
Token: operator        Lexeme: ==              Line: 10
<Term Prime> -> ε
<Expression Prime> -> ε
<Relop> -> ==
---------------------------------------------------------------------
Token: operator        Lexeme: -               Line: 10
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary>
---------------------------------------------------------------------
Token: integer         Lexeme: 3               Line: 10
<Primary> -> <Integer>
<Integer> -> 3
---------------------------------------------------------------------
Token: separator       Lexeme: )               Line: 10
<Term Prime> -> ε
<Expression Prime> -> ε
---------------------------------------------------------------------
Token: keyword         Lexeme: return          Line: 11
<Statement> -> <Return>
<Return> -> ret <Expression>;
---------------------------------------------------------------------
Token: integer         Lexeme: 0               Line: 11
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Integer>
<Integer> -> 0
---------------------------------------------------------------------
Token: separator       Lexeme: ;               Line: 11
<Term Prime> -> ε
<Expression Prime> -> ε
---------------------------------------------------------------------
Token: keyword         Lexeme: endif           Line: 12
---------------------------------------------------------------------
Token: keyword         Lexeme: while           Line: 14
<Statement List> -> <Statement>
<Statement> -> <While>
<While> -> while ( <Condition> ) <Statement> endwhile
---------------------------------------------------------------------
Token: separator       Lexeme: (               Line: 14
---------------------------------------------------------------------
Token: identifier      Lexeme: low             Line: 14
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
<Identifier> -> low
---------------------------------------------------------------------
Token: operator        Lexeme: <=              Line: 14
<Term Prime> -> ε
<Expression Prime> -> ε
<Relop> -> <=
---------------------------------------------------------------------
Token: identifier      Lexeme: high            Line: 14
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
<Identifier> -> high
---------------------------------------------------------------------
Token: separator       Lexeme: )               Line: 14
<Term Prime> -> ε
<Expression Prime> -> ε
---------------------------------------------------------------------
Token: separator       Lexeme: {               Line: 14
<Statement> -> <Compound>
<Compound> -> { <Statement List> }
---------------------------------------------------------------------
Token: keyword         Lexeme: print           Line: 15
<Statement List> -> <Statement> <Statement List>
<Statement> -> <Print>
<Print> -> print ( <Expression> );
---------------------------------------------------------------------
Token: separator       Lexeme: (               Line: 15
---------------------------------------------------------------------
Token: identifier      Lexeme: low             Line: 15
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
<Identifier> -> low
---------------------------------------------------------------------
Token: separator       Lexeme: )               Line: 15
<Term Prime> -> ε
<Expression Prime> -> ε
---------------------------------------------------------------------
Token: separator       Lexeme: ;               Line: 15
---------------------------------------------------------------------
Token: keyword         Lexeme: print           Line: 16
<Statement List> -> <Statement> <Statement List>
<Statement> -> <Print>
<Print> -> print ( <Expression> );
---------------------------------------------------------------------
Token: separator       Lexeme: (               Line: 16
---------------------------------------------------------------------
Token: identifier      Lexeme: convertx        Line: 16
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier> ( <IDs> )
<Identifier> -> convertx
---------------------------------------------------------------------
Token: separator       Lexeme: (               Line: 16
---------------------------------------------------------------------
Token: identifier      Lexeme: low             Line: 16
<IDs> -> <Identifier>
<Identifier> -> low
---------------------------------------------------------------------
Token: separator       Lexeme: )               Line: 16
---------------------------------------------------------------------
Token: separator       Lexeme: )               Line: 16
<Term Prime> -> ε
<Expression Prime> -> ε
---------------------------------------------------------------------
Token: separator       Lexeme: ;               Line: 16
---------------------------------------------------------------------
Token: identifier      Lexeme: low             Line: 17
<Statement List> -> <Statement>
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression>;
<Identifier> -> low
---------------------------------------------------------------------
Token: operator        Lexeme: =               Line: 17
---------------------------------------------------------------------
Token: identifier      Lexeme: low             Line: 17
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
<Identifier> -> low
---------------------------------------------------------------------
Token: operator        Lexeme: +               Line: 17
<Term Prime> -> ε
<Expression Prime> -> + <Term> <Expression Prime>
---------------------------------------------------------------------
Token: identifier      Lexeme: step            Line: 17
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
<Identifier> -> step
---------------------------------------------------------------------
Token: separator       Lexeme: ;               Line: 17
<Term Prime> -> ε
<Expression Prime> -> ε
---------------------------------------------------------------------
Token: separator       Lexeme: }               Line: 18
---------------------------------------------------------------------
Token: keyword         Lexeme: endwhile        Line: 19
---------------------------------------------------------------------
Token: separator       Lexeme: $               Line: 20
